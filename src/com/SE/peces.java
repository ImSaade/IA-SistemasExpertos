/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.SE;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.imageio.ImageIO;
import javax.lang.model.util.Types;
import javax.swing.JFileChooser;



/**
 *
 * @author saaen
 */
public class peces extends javax.swing.JFrame {

    /**
     * Creates new form peces
     */
    
    private int registroActual = 0;
    
    
    public peces() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        
        establecerIconoEnBoton(jButton1, "src/com/images/inicio.png", 40, 40);
        establecerIconoEnBoton(jButton2, "src/com/images/anterior.png", 40, 40);
        establecerIconoEnBoton(jButton3, "src/com/images/siguiente.png", 40, 40);
        establecerIconoEnBoton(jButton4, "src/com/images/final.png", 40, 40);
        establecerIconoEnBoton(jButton5, "src/com/images/nuevo.png", 40, 40);
        establecerIconoEnBoton(jButton6, "src/com/images/grabar.png", 40, 40);
        establecerIconoEnBoton(jButton7, "src/com/images/cancelar.png", 40, 40);
        establecerIconoEnBoton(jButton8, "src/com/images/modificar.png", 40, 40);
        establecerIconoEnBoton(jButton9, "src/com/images/borrar.png", 40, 40);
        establecerIconoEnBoton(jButton10, "src/com/images/consultar.png", 40, 40);
        establecerIconoEnBoton(jButton11, "src/com/images/salir.png", 40, 40);
        establecerIconoEnBoton(jButton12, "src/com/images/imagen.png", 40, 40);
        
        
        ImageIcon logoAcuario = new ImageIcon ("src/com/images/acuario.png");
        ImageIcon acuario = new ImageIcon (logoAcuario.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_DEFAULT));
        jLabel4.setIcon(acuario);
        
        jTextField1.setEditable(false);
        jTextArea1.setEditable(false);
        
        jButton12.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton12 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Roboto Black", 0, 70)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("\"DATOS DE PECES\"");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(663, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(652, 652, 652))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel3)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, 220));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jButton1.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton1.setText("INICIO");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton2.setText("ANTERIOR");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton3.setText("SIGUIENTE");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton4.setText("FINAL");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton5.setText("NUEVO");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton6.setText("GRABAR");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton7.setText("CANCELAR");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton8.setText("MODIFICAR");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton9.setText("BORRAR");

        jButton10.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton10.setText("CONSULTAR");

        jButton11.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton11.setText("SALIR");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jLabel1.setText("Nombre del pez");

        jTextField1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jLabel2.setText("Descripci√≥n");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(null);
        jScrollPane1.setViewportView(jTextArea1);

        jButton12.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton12.setText("IMAGEN");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(494, 494, 494)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(444, 444, 444)
                                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1)
                                    .addComponent(jTextField1))))
                        .addGap(217, 217, 217)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(364, 364, 364))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addGap(113, 113, 113))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 1920, 860));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       ConexionDB conexionDB = new ConexionDB();

        try {
            // Obtener la conexi√≥n a la base de datos
            Connection connection = conexionDB.obtenerConexion();

            // Preparar una consulta SQL para seleccionar el primer registro
            String sql = "SELECT nombre_objeto, descripcion, imagen FROM objeto LIMIT 1";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Ejecutar la consulta
            ResultSet result = statement.executeQuery();

            // Verificar si hay un resultado
            if (result.next()) {
                // Obtener los datos del registro
                String nombre = result.getString("nombre_objeto");
                String descripcion = result.getString("descripcion");
                byte[] imagenBytes = result.getBytes("imagen");

                // Mostrar los datos en los componentes de la interfaz
                jTextField1.setText(nombre);
                jTextArea1.setText(descripcion);

                // Convertir el arreglo de bytes de la imagen a un ImageIcon
                ImageIcon imagenIcon = new ImageIcon(imagenBytes);

                // Escalar la imagen para que se ajuste al tama√±o del jLabel4
                Image imagen = imagenIcon.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_SMOOTH);

                // Crear un nuevo ImageIcon con la imagen escalada y mostrarlo en jLabel4
                ImageIcon imagenEscalada = new ImageIcon(imagen);
                jLabel4.setIcon(imagenEscalada);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontraron registros.");
            }
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            System.out.println("Error:" + e.getMessage());
        } finally {
            // Cerrar la conexi√≥n
            conexionDB.cerrarConexion();
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton11MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
         ConexionDB conexionDB = new ConexionDB();

        try {
            // Verificar si estamos en el primer registro (registroActual igual a 1)
            if (registroActual > 1) {
                // Obtener la conexi√≥n a la base de datos
                Connection connection = conexionDB.obtenerConexion();

                // Preparar una consulta SQL para seleccionar el registro anterior
                String sql = "SELECT nombre_objeto, descripcion, imagen FROM objeto LIMIT 1 OFFSET " + (registroActual - 2);
                PreparedStatement statement = connection.prepareStatement(sql);

                // Ejecutar la consulta
                ResultSet result = statement.executeQuery();

                // Verificar si hay un resultado
                if (result.next()) {
                    // Obtener los datos del registro
                    String nombre = result.getString("nombre_objeto");
                    String descripcion = result.getString("descripcion");
                    byte[] imagenBytes = result.getBytes("imagen");

                    // Mostrar los datos en los componentes de la interfaz
                    jTextField1.setText(nombre);
                    jTextArea1.setText(descripcion);

                    // Decrementar el registro actual
                    registroActual--;

                    // Convertir el arreglo de bytes de la imagen a un ImageIcon
                    ImageIcon imagenIcon = new ImageIcon(imagenBytes);

                    // Escalar la imagen para que se ajuste al tama√±o del jLabel4
                    Image imagen = imagenIcon.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_SMOOTH);

                    // Crear un nuevo ImageIcon con la imagen escalada y mostrarlo en jLabel4
                    ImageIcon imagenEscalada = new ImageIcon(imagen);
                    jLabel4.setIcon(imagenEscalada);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No hay registros anteriores.");
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            // Cerrar la conexi√≥n
            conexionDB.cerrarConexion();
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        ConexionDB conexionDB = new ConexionDB();
        try {
            // Obtener la conexi√≥n a la base de datos
            Connection connection = conexionDB.obtenerConexion();

            // Preparar una consulta SQL para seleccionar el siguiente registro
            String sql = "SELECT nombre_objeto, descripcion, imagen FROM objeto LIMIT 1 OFFSET " + registroActual;
            PreparedStatement statement = connection.prepareStatement(sql);

            // Ejecutar la consulta
            ResultSet result = statement.executeQuery();

            // Verificar si hay un resultado
            if (result.next()) {
                // Obtener los datos del registro
                String nombre = result.getString("nombre_objeto");
                String descripcion = result.getString("descripcion");
                byte[] imagenBytes = result.getBytes("imagen");

                // Mostrar los datos en los componentes de la interfaz
                jTextField1.setText(nombre);
                jTextArea1.setText(descripcion);

                // Incrementar el registro actual
                registroActual++;

                // Convertir el arreglo de bytes de la imagen a un ImageIcon
                ImageIcon imagenIcon = new ImageIcon(imagenBytes);

                // Escalar la imagen para que se ajuste al tama√±o del jLabel4
                Image imagen = imagenIcon.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_SMOOTH);

                // Crear un nuevo ImageIcon con la imagen escalada y mostrarlo en jLabel4
                ImageIcon imagenEscalada = new ImageIcon(imagen);
                jLabel4.setIcon(imagenEscalada);
            } else {
                JOptionPane.showMessageDialog(this, "No hay m√°s registros.");
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            // Cerrar la conexi√≥n
            conexionDB.cerrarConexion();
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
         ConexionDB conexionDB = new ConexionDB();
        try {
            // Obtener la conexi√≥n a la base de datos
            Connection connection = conexionDB.obtenerConexion();

            // Preparar una consulta SQL para seleccionar el √∫ltimo registro
            String sql = "SELECT nombre_objeto, descripcion, imagen FROM objeto ORDER BY id_objeto DESC LIMIT 1";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Ejecutar la consulta
            ResultSet result = statement.executeQuery();

            // Verificar si hay un resultado
            if (result.next()) {
                // Obtener los datos del registro
                String nombre = result.getString("nombre_objeto");
                String descripcion = result.getString("descripcion");
                byte[] imagenBytes = result.getBytes("imagen");

                // Mostrar los datos en los componentes de la interfaz
                jTextField1.setText(nombre);
                jTextArea1.setText(descripcion);

                // Convertir el arreglo de bytes de la imagen a un ImageIcon
                ImageIcon imagenIcon = new ImageIcon(imagenBytes);

                // Escalar la imagen para que se ajuste al tama√±o del jLabel4
                Image imagen = imagenIcon.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_SMOOTH);

                // Crear un nuevo ImageIcon con la imagen escalada y mostrarlo en jLabel4
                ImageIcon imagenEscalada = new ImageIcon(imagen);
                jLabel4.setIcon(imagenEscalada);
            } else {
                JOptionPane.showMessageDialog(this, "No hay registros en la base de datos.");
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            // Cerrar la conexi√≥n
            conexionDB.cerrarConexion();
        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        jTextField1.setEditable(true);
        jTextArea1.setEditable(true);
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
        jButton12.setEnabled(true);
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseClicked
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            ImageIcon icon = new ImageIcon(selectedFile.getAbsolutePath());

            // Escalar la imagen para que se ajuste al tama√±o del jLabel4
            Image imagen = icon.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_SMOOTH);
            icon = new ImageIcon(imagen);
            jLabel4.setIcon(icon);
        }
    }//GEN-LAST:event_jButton12MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        // TODO add your handling code here:                                
         ConexionDB conexionDB = new ConexionDB();
        try {
            // Obtener la conexi√≥n a la base de datos
            Connection connection = conexionDB.obtenerConexion();

            // Obtener el nombre y descripci√≥n ingresados por el usuario
            String nombre = jTextField1.getText();
            String descripcion = jTextArea1.getText();

            // Verificar que se haya ingresado un nombre y una descripci√≥n
            if (nombre.isEmpty() || descripcion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre y una descripci√≥n.");
                return; // Salir si falta informaci√≥n
            }

            // Obtener la imagen actualmente mostrada en el jLabel4
            ImageIcon icon = (ImageIcon) jLabel4.getIcon();
            Image imagen = icon.getImage();

            // Convertir la imagen a un objeto BufferedImage
            BufferedImage bufferedImage = new BufferedImage(imagen.getWidth(null), imagen.getHeight(null), BufferedImage.TYPE_INT_RGB);
            Graphics2D g = bufferedImage.createGraphics();
            g.drawImage(imagen, 0, 0, null);
            g.dispose();

            // Convertir el BufferedImage a un arreglo de bytes (en formato JPEG en este ejemplo)
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "jpg", baos);
            byte[] imagenBytes = baos.toByteArray();

            // Preparar una consulta SQL para insertar los datos en la base de datos
            String sql = "INSERT INTO objeto (nombre_objeto, descripcion, imagen) VALUES (?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Establecer los par√°metros en la consulta
            statement.setString(1, nombre);
            statement.setString(2, descripcion);
            statement.setBytes(3, imagenBytes);

            // Ejecutar la consulta para insertar el nuevo registro
            int filasAfectadas = statement.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "Registro insertado con √©xito.");
            } else {
                JOptionPane.showMessageDialog(this, "Error al insertar el registro.");
            }

            // Cerrar la conexi√≥n a la base de datos
            conexionDB.cerrarConexion();

        } catch (Exception e) {
            System.out.println("Error al guardar en la base de datos: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        // TODO add your handling code here:
        ImageIcon logoAcuario = new ImageIcon ("src/com/images/acuario.png");
        ImageIcon acuario = new ImageIcon (logoAcuario.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_DEFAULT));
        jLabel4.setIcon(acuario);
        
        jTextField1.setText("");
        jTextArea1.setText("");
        jButton12.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
    }//GEN-LAST:event_jButton7MouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        // TODO add your handling code here:
        jTextField1.setEditable(true);
        jTextArea1.setEditable(true);
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
        jButton12.setEnabled(true);
        
        ConexionDB conexionDB = new ConexionDB();

        try {
            // Obtener la conexi√≥n a la base de datos
            Connection connection = conexionDB.obtenerConexion();

            // Obtener el nombre y descripci√≥n ingresados por el usuario
            String nombre = jTextField1.getText();
            String descripcion = jTextArea1.getText();

            // Verificar que se haya ingresado un nombre y una descripci√≥n
            if (nombre.isEmpty() || descripcion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un nombre y una descripci√≥n.");
                return; // Salir si falta informaci√≥n
            }

            // Obtener la imagen actualmente mostrada en el jLabel4
            ImageIcon icon = (ImageIcon) jLabel4.getIcon();
            Image imagen = icon.getImage();

            // Convertir la imagen a un objeto BufferedImage
            BufferedImage bufferedImage = new BufferedImage(imagen.getWidth(null), imagen.getHeight(null), BufferedImage.TYPE_INT_RGB);
            Graphics2D g = bufferedImage.createGraphics();
            g.drawImage(imagen, 0, 0, null);
            g.dispose();

            // Convertir el BufferedImage a un arreglo de bytes (en formato JPEG en este ejemplo)
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(bufferedImage, "jpeg", baos);
            byte[] imagenBytes = baos.toByteArray();

            // Preparar una consulta SQL para actualizar los datos en la base de datos
            String sql = "UPDATE objeto SET nombre_objeto = ?, descripcion = ?, imagen = ? WHERE id_objeto = ?"; // Asume que existe un campo ID para identificar el registro a actualizar
            PreparedStatement statement = connection.prepareStatement(sql);

            // Establecer los par√°metros en la consulta
            statement.setString(1, nombre);
            statement.setString(2, descripcion);
            statement.setBytes(3, imagenBytes);

            // Ejecutar la consulta para actualizar el registro
            int filasAfectadas = statement.executeUpdate();

            if (filasAfectadas > 0) {
                jButton12.setEnabled(false);
                jButton6.setEnabled(false);
                jButton7.setEnabled(false);
                JOptionPane.showMessageDialog(this, "Registro actualizado con √©xito.");
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar el registro.");
            }

            // Cerrar la conexi√≥n a la base de datos
            conexionDB.cerrarConexion();

        } catch (Exception e) {
            System.out.println("Error al actualizar en la base de datos: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton8MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(peces.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(peces.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(peces.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(peces.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new peces().setVisible(true);
            }
        });
    }
    
    public void establecerIconoEnBoton(JButton boton, String rutaIcono, int ancho, int alto) {
        ImageIcon icono = new ImageIcon(rutaIcono);
        Image imagen = icono.getImage().getScaledInstance(ancho, alto, Image.SCALE_SMOOTH); // Puedes cambiar SCALE_SMOOTH a otro m√©todo de escala si lo prefieres
        ImageIcon iconoEscalado = new ImageIcon(imagen);
        boton.setIcon(iconoEscalado);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
