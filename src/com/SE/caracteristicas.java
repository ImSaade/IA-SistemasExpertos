/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.SE;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData; // Importa la clase desde el paquete java.sql
import javax.swing.JButton;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author saaen
 */
public class caracteristicas extends javax.swing.JFrame {

    /**
     * Creates new form Caracteristicas
     */
    private int idActual = 1;
    private int ca = 0;

    public caracteristicas() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);

        establecerIconoEnBoton(jButton1, "src/com/images/inicio.png", 40, 40);
        establecerIconoEnBoton(jButton2, "src/com/images/anterior.png", 40, 40);
        establecerIconoEnBoton(jButton3, "src/com/images/siguiente.png", 40, 40);
        establecerIconoEnBoton(jButton4, "src/com/images/final.png", 40, 40);
        establecerIconoEnBoton(jButton5, "src/com/images/nuevo.png", 40, 40);
        establecerIconoEnBoton(jButton6, "src/com/images/grabar.png", 40, 40);
        establecerIconoEnBoton(jButton7, "src/com/images/cancelar.png", 40, 40);
        establecerIconoEnBoton(jButton8, "src/com/images/modificar.png", 40, 40);
        establecerIconoEnBoton(jButton9, "src/com/images/borrar.png", 40, 40);
        establecerIconoEnBoton(jButton10, "src/com/images/consultar.png", 40, 40);
        establecerIconoEnBoton(jButton11, "src/com/images/salir.png", 40, 40);

        ImageIcon logoAcuario = new ImageIcon("src/com/images/anatomia.jpg");
        ImageIcon acuario = new ImageIcon(logoAcuario.getImage().getScaledInstance(jLabel4.getWidth(), jLabel4.getHeight(), Image.SCALE_DEFAULT));
        jLabel4.setIcon(acuario);

        jTextField1.setEditable(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jLabel2.setVisible(false);
        jTextField2.setVisible(false);
        jTextField2.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Roboto Black", 0, 70)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("\"DATOS CARACTERISTICAS\"");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(438, 438, 438)
                .addComponent(jLabel3)
                .addContainerGap(561, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel3)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, 220));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jButton1.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton1.setText("INICIO");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton2.setText("ANTERIOR");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton3.setText("SIGUIENTE");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton4.setText("FINAL");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton9.setText("BORRAR");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton8.setText("MODIFICAR");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton7.setText("CANCELAR");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton6.setText("GRABAR");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton5.setText("NUEVO");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton10.setText("CONSULTAR");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jButton11.setText("SALIR");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jLabel1.setText("Caracteristicas");

        jTextField1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        jLabel2.setText("Nueva");

        jTextField2.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(494, 494, 494)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(186, 186, 186)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(152, 152, 152))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2)
                            .addComponent(jTextField1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(275, 275, 275)))
                .addGap(124, 124, 124))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addGap(107, 107, 107))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 220, 1920, 860));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        ConexionDB conexionDB = new ConexionDB();
        Connection connection = conexionDB.obtenerConexion();
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Modificar la consulta SQL para seleccionar la característica con el ID más bajo
            String consulta = "SELECT caracteristica FROM caracteristicas ORDER BY id_caracteristica LIMIT 1";
            preparedStatement = connection.prepareStatement(consulta);
            resultSet = preparedStatement.executeQuery();

            // Obtener la característica y mostrarla en el jTextField1
            if (resultSet.next()) {
                String caracteristica = resultSet.getString("caracteristica");
                jTextField1.setText(caracteristica);
            }
        } catch (Exception ex) {
            // Manejar cualquier excepción de base de datos
            ex.printStackTrace();
        } finally {
            // Cerrar las conexiones y recursos
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
                conexionDB.cerrarConexion(); // Cierra la conexión utilizando tu clase ConexionDB
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        if (idActual > 1) {
            idActual--; // Disminuye el ID actual si no está en el primer registro

            ConexionDB conexionDB = new ConexionDB();
            Connection connection = conexionDB.obtenerConexion();
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;

            try {
                // Modificar la consulta SQL para seleccionar la característica con el ID actual
                String consulta = "SELECT caracteristica FROM caracteristicas WHERE id_caracteristica = ?";
                preparedStatement = connection.prepareStatement(consulta);
                preparedStatement.setInt(1, idActual);
                resultSet = preparedStatement.executeQuery();

                // Obtener la característica y mostrarla en el jTextField1
                if (resultSet.next()) {
                    String caracteristica = resultSet.getString("caracteristica");
                    jTextField1.setText(caracteristica);
                }
            } catch (Exception ex) {
                // Manejar cualquier excepción de base de datos
                ex.printStackTrace();
            } finally {
                // Cerrar las conexiones y recursos
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }
                    conexionDB.cerrarConexion(); // Cierra la conexión utilizando tu clase ConexionDB
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay registros anteriores", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        idActual++;

        ConexionDB conexionDB = new ConexionDB();
        Connection connection = conexionDB.obtenerConexion();
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            // Modificar la consulta SQL para seleccionar la característica con el ID actual
            String consulta = "SELECT caracteristica FROM caracteristicas WHERE id_caracteristica = ?";
            preparedStatement = connection.prepareStatement(consulta);
            preparedStatement.setInt(1, idActual);
            resultSet = preparedStatement.executeQuery();

            // Obtener la característica y mostrarla en el jTextField1
            if (resultSet.next()) {
                String caracteristica = resultSet.getString("caracteristica");
                jTextField1.setText(caracteristica);
            } else {
                JOptionPane.showMessageDialog(null, "No hay más registros siguientes", "Aviso", JOptionPane.WARNING_MESSAGE);
                idActual--; // Vuelve al ID anterior ya que no hay más registros siguientes
            }
        } catch (Exception ex) {
            // Manejar cualquier excepción de base de datos
            ex.printStackTrace();
        } finally {
            // Cerrar las conexiones y recursos
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
                conexionDB.cerrarConexion(); // Cierra la conexión utilizando tu clase ConexionDB
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        ConexionDB conexionDB = new ConexionDB();
        try {
            // Obtener la conexión a la base de datos
            Connection connection = conexionDB.obtenerConexion();

            // Preparar una consulta SQL para seleccionar el último registro
            String sql = "SELECT caracteristica FROM caracteristicas ORDER BY id_caracteristica DESC LIMIT 1";
            PreparedStatement statement = connection.prepareStatement(sql);

            // Ejecutar la consulta
            ResultSet result = statement.executeQuery();

            // Verificar si hay un resultado
            if (result.next()) {
                // Obtener los datos del registro
                String carac = result.getString("caracteristica");

                // Mostrar los datos en los componentes de la interfaz
                jTextField1.setText(carac);

                idActual = obtenerCantidadRegistros() + 40;
            } else {
                JOptionPane.showMessageDialog(this, "No hay registros en la base de datos.");
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            // Cerrar la conexión
            conexionDB.cerrarConexion();
        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        ConexionDB conexionDB = new ConexionDB();
        Connection connection = conexionDB.obtenerConexion();
        PreparedStatement preparedStatement = null;

        try {
            // Solicitar al usuario que ingrese el ID a eliminar
            String idEliminar = JOptionPane.showInputDialog(this, "Ingrese el ID de la característica a eliminar:");

            // Verificar si se ingresó un valor y es un número válido
            if (idEliminar != null && !idEliminar.isEmpty()) {
                try {
                    int id = Integer.parseInt(idEliminar);

                    // Consulta SQL para obtener la característica a eliminar
                    String consulta = "SELECT id_caracteristica, caracteristica FROM caracteristicas WHERE id_caracteristica = ?";
                    preparedStatement = connection.prepareStatement(consulta);
                    preparedStatement.setInt(1, id);

                    // Ejecutar la consulta
                    ResultSet resultSet = preparedStatement.executeQuery();

                    if (resultSet.next()) {
                        int idCaracteristica = resultSet.getInt("id_caracteristica");
                        String caracteristica = resultSet.getString("caracteristica");

                        // Mostrar un JOptionPane de confirmación
                        int confirmacion = JOptionPane.showConfirmDialog(this, "ID: " + idCaracteristica + "\nCaracterística: " + caracteristica + "\n\n¿Está seguro de eliminar esta característica?", "Confirmación", JOptionPane.YES_NO_OPTION);

                        if (confirmacion == JOptionPane.YES_OPTION) {
                            // Eliminar la característica
                            String sql = "DELETE FROM caracteristicas WHERE id_caracteristica = ?";
                            preparedStatement = connection.prepareStatement(sql);
                            preparedStatement.setInt(1, id);
                            int filasAfectadas = preparedStatement.executeUpdate();

                            if (filasAfectadas > 0) {
                                JOptionPane.showMessageDialog(this, "Característica eliminada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(this, "No se pudo eliminar la característica.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "ID no encontrado en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "ID no válido. Ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
                conexionDB.cerrarConexion();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton9MouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        jTextField1.setEditable(false);
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
        jTextField2.setVisible(true);
        jTextField2.setEditable(true);
        jLabel2.setVisible(true);
        ca = 2;
    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        jTextField1.setText("");
        jTextField1.setEditable(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
    }//GEN-LAST:event_jButton7MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        /*ConexionDB conexionDB = new ConexionDB();
        Connection connection = conexionDB.obtenerConexion();
        PreparedStatement preparedStatement = null;

        try {
            // Obtén el valor del JTextField donde el usuario ingresó la nueva característica
            String nuevaCaracteristica = jTextField1.getText();

            if (nuevaCaracteristica.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese una característica antes de insertarla.", "Aviso", JOptionPane.WARNING_MESSAGE);
            } else {
                // Prepara la consulta SQL para insertar la nueva característica en la tabla
                String sql = "INSERT INTO caracteristicas (caracteristica) VALUES (?)";
                preparedStatement = connection.prepareStatement(sql);
                preparedStatement.setString(1, nuevaCaracteristica);

                // Ejecuta la consulta para insertar el nuevo registro
                int filasAfectadas = preparedStatement.executeUpdate();

                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, "Característica insertada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    jTextField1.setEditable(false);
                    jButton6.setEnabled(false);
                    jButton7.setEnabled(false);

                    // Borra el texto del campo después de la inserción
                    jTextField1.setText("");

                    // Puedes actualizar la lista de características si es necesario
                    // ActualizarListaCaracteristicas();
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo insertar la característica.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
                conexionDB.cerrarConexion();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }*/
        ConexionDB conexionDB = new ConexionDB();
        Connection connection = conexionDB.obtenerConexion();
        PreparedStatement insertPreparedStatement = null;
        PreparedStatement updatePreparedStatement = null;

        try {
            String nuevaCaracteristica = jTextField1.getText();
            String caracteristicaActualiza = jTextField2.getText();

            if (nuevaCaracteristica.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese una característica antes de insertarla.", "Aviso", JOptionPane.WARNING_MESSAGE);
            } else {
                String insertSQL = "INSERT INTO caracteristicas (caracteristica) VALUES (?)";
                String updateSQL = "UPDATE caracteristicas SET caracteristica = ? WHERE caracteristica = ?";

                insertPreparedStatement = connection.prepareStatement(insertSQL);
                updatePreparedStatement = connection.prepareStatement(updateSQL);

                if (ca == 1) {
                    // Operación de inserción
                    insertPreparedStatement.setString(1, nuevaCaracteristica);
                    insertPreparedStatement.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Característica insertada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else if (ca == 2) {
                    // Operación de modificación
                    updatePreparedStatement.setString(1, (ca == 2) ? caracteristicaActualiza : nuevaCaracteristica);
                    updatePreparedStatement.setString(2, jTextField1.getText()); // Condición para identificar el registro a actualizar basado en jTextField1
                    updatePreparedStatement.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Característica modificada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Valor de 'ca' no válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                jTextField1.setEditable(false);
                jButton6.setEnabled(false);
                jButton7.setEnabled(false);
                jTextField1.setText("");
                jLabel2.setVisible(false);
                jTextField2.setVisible(false);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (insertPreparedStatement != null) {
                    insertPreparedStatement.close();
                }
                if (updatePreparedStatement != null) {
                    updatePreparedStatement.close();
                }
                conexionDB.cerrarConexion();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        jTextField1.setEditable(true);
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
        jTextField1.setText("");
        ca = 1;
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked
        ConexionDB conexionDB = new ConexionDB();
        Connection connection = conexionDB.obtenerConexion();

        try {
            String consultaSql = "SELECT * FROM caracteristicas"; // Consulta para seleccionar todos los campos de la tabla caracteristicas
            PreparedStatement consultaStatement = connection.prepareStatement(consultaSql);

            ResultSet resultSet = consultaStatement.executeQuery();

            // Crear una instancia de la nueva interfaz "tabla.java" y mostrarla
            tabla_c tabla = new tabla_c(this);
            tabla.setVisible(true);
            this.dispose();

            // Obtener el componente de tabla en la interfaz "tabla.java"
            JTable jTable = tabla.getJTable();

            // Crear un modelo de tabla y establecerlo en la tabla
            DefaultTableModel tableModel = new DefaultTableModel();
            jTable.setModel(tableModel);

            // Agregar las filas de la consulta al modelo de la tabla
            int numColumns = resultSet.getMetaData().getColumnCount();

            // Agregar nombres de columnas al modelo de tabla
            for (int i = 1; i <= numColumns; i++) {
                tableModel.addColumn(resultSet.getMetaData().getColumnName(i));
            }

            // Agregar filas al modelo de tabla
            while (resultSet.next()) {
                Object[] rowData = new Object[numColumns];
                for (int i = 1; i <= numColumns; i++) {
                    rowData[i - 1] = resultSet.getObject(i);
                }
                tableModel.addRow(rowData);
            }

            conexionDB.cerrarConexion();
        } catch (Exception e) {
            System.out.println("Error al consultar en la base de datos: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al consultar en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton10MouseClicked

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked
        experto exp = new experto();
        exp.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton11MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(caracteristicas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(caracteristicas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(caracteristicas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(caracteristicas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new caracteristicas().setVisible(true);
            }
        });
    }

    public void establecerIconoEnBoton(JButton boton, String rutaIcono, int ancho, int alto) {
        ImageIcon icono = new ImageIcon(rutaIcono);
        Image imagen = icono.getImage().getScaledInstance(ancho, alto, Image.SCALE_SMOOTH); // Puedes cambiar SCALE_SMOOTH a otro método de escala si lo prefieres
        ImageIcon iconoEscalado = new ImageIcon(imagen);
        boton.setIcon(iconoEscalado);
    }

    public int obtenerCantidadRegistros() {
        int totalRegistros = 0;
        ConexionDB conexionDB = new ConexionDB();
        try {
            Connection connection = conexionDB.obtenerConexion();
            String countQuery = "SELECT COUNT(*) AS total_registros FROM objeto";
            PreparedStatement countStatement = connection.prepareStatement(countQuery);
            ResultSet countResult = countStatement.executeQuery();

            if (countResult.next()) {
                totalRegistros = countResult.getInt("total_registros");
            }
        } catch (Exception e) {
            System.out.println("Error al obtener la cantidad de registros: " + e.getMessage());
        } finally {
            // Cerrar la conexión
            conexionDB.cerrarConexion();
        }

        return totalRegistros;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
